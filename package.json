{
  "name": "breakpoint-bucket",
  "displayName": "Breakpoint Bucket",
  "repository": "https://github.com/Raghava-Ch/breakpoint-bucket.git",
  "description": "Group breakpoints and enable/disable them collectively or individually",
  "version": "0.1.0",
  "publisher": "your-publisher-name",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Debuggers",
    "Other"
  ],
  "keywords": [
    "breakpoint",
    "debug",
    "group",
    "debugging"
  ],
  "activationEvents": [
    "onView:breakpointGroups"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "views": {
      "debug": [
        {
              "id": "breakpointBucket",
              "name": "Breakpoint Bucket",
          "when": "breakpointsExist"
        }
      ]
    },
    "commands": [
      {
        "command": "breakpointBucket.createGroup",
        "title": "Create New Group",
        "icon": "$(add)"
      },
      {
        "command": "breakpointBucket.addToGroup",
        "title": "Add to Group"
      },
      {
        "command": "breakpointBucket.removeFromGroup",
        "title": "Remove from Group"
      },
      {
        "command": "breakpointBucket.enableGroup",
        "title": "Enable Group"
      },
      {
        "command": "breakpointBucket.disableGroup",
        "title": "Disable Group"
      },
      {
        "command": "breakpointBucket.deleteGroup",
        "title": "Delete Group"
      },
      {
        "command": "breakpointBucket.renameGroup",
        "title": "Rename Group"
      },
      {
        "command": "breakpointBucket.enableBreakpoint",
        "title": "Enable Breakpoint"
      },
      {
        "command": "breakpointBucket.disableBreakpoint",
        "title": "Disable Breakpoint"
      },
      {
        "command": "breakpointBucket.createGroupFromBreakpoint",
        "title": "Create Group from Breakpoint"
      },
      {
        "command": "breakpointBucket.removeAllBreakpointsInGroup",
        "title": "Remove All Breakpoints in Group"
      },
      {
        "command": "breakpointBucket.removeAllUngroupedBreakpoints",
        "title": "Remove All Ungrouped Breakpoints"
      },
      {
        "command": "breakpointBucket.removeAllGroups",
        "title": "Remove All Groups"
      },
      {
        "command": "breakpointBucket.moveBreakpointToGroup",
        "title": "Move Breakpoint to Group"
      },
      {
        "command": "breakpointBucket.moveSelectedBreakpointsToGroup",
        "title": "Move Selected Breakpoints to Group"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "breakpointBucket.createGroup",
          "when": "view == breakpointBucket",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "breakpointBucket.enableGroup",
          "when": "view == breakpointBucket && viewItem == group",
          "group": "1_enable_disable"
        },
        {
          "command": "breakpointBucket.disableGroup",
          "when": "view == breakpointBucket && viewItem == group",
          "group": "1_enable_disable"
        },
        {
          "command": "breakpointBucket.renameGroup",
          "when": "view == breakpointBucket && viewItem == group",
          "group": "2_manage"
        },
        {
          "command": "breakpointBucket.deleteGroup",
          "when": "view == breakpointBucket && viewItem == group",
          "group": "2_manage"
        },
        {
          "command": "breakpointBucket.enableBreakpoint",
          "when": "view == breakpointBucket && viewItem == breakpoint",
          "group": "1_enable_disable"
        },
        {
          "command": "breakpointBucket.disableBreakpoint",
          "when": "view == breakpointBucket && viewItem == breakpoint",
          "group": "1_enable_disable"
        },
        {
          "command": "breakpointBucket.removeFromGroup",
          "when": "view == breakpointBucket && viewItem == breakpoint",
          "group": "2_manage"
        },
        {
          "command": "breakpointBucket.enableBreakpoint",
          "when": "view == breakpointBucket && viewItem == ungrouped-breakpoint",
          "group": "1_enable_disable"
        },
        {
          "command": "breakpointBucket.disableBreakpoint",
          "when": "view == breakpointBucket && viewItem == ungrouped-breakpoint",
          "group": "1_enable_disable"
        },
        {
          "command": "breakpointBucket.addToGroup",
          "when": "view == breakpointBucket && viewItem == ungrouped-breakpoint",
          "group": "2_manage"
        },
        {
          "command": "breakpointBucket.createGroupFromBreakpoint",
          "when": "view == breakpointBucket && viewItem == ungrouped-breakpoint",
          "group": "2_manage"
        },
        {
          "command": "breakpointBucket.removeAllBreakpointsInGroup",
          "when": "view == breakpointBucket && viewItem == group",
          "group": "3_remove"
        },
        {
          "command": "breakpointBucket.removeAllUngroupedBreakpoints",
          "when": "view == breakpointBucket",
          "group": "view/title"
        },
        {
          "command": "breakpointBucket.removeAllGroups",
          "when": "view == breakpointBucket",
          "group": "view/title"
        },
        {
          "command": "breakpointBucket.moveBreakpointToGroup",
          "when": "view == breakpointBucket && viewItem == breakpoint",
          "group": "2_manage"
        },
        {
          "command": "breakpointBucket.moveBreakpointToGroup",
          "when": "view == breakpointBucket && viewItem == ungrouped-breakpoint",
          "group": "2_manage"
        },
        {
          "command": "breakpointBucket.moveSelectedBreakpointsToGroup",
          "when": "view == breakpointBucket",
          "group": "view/title"
        }
      ],
      "breakpoints/context": [
        {
          "command": "breakpointBucket.addToGroup",
          "when": "breakpoint"
        }
      ],
      "keybindings": [
        {
          "command": "breakpointBucket.moveSelectedBreakpointsToGroup",
          "key": "ctrl+shift+m",
          "when": "view == breakpointBucket"
        },
        {
          "command": "breakpointBucket.removeAllUngroupedBreakpoints",
          "key": "ctrl+shift+u",
          "when": "view == breakpointBucket"
        },
        {
          "command": "breakpointBucket.removeAllGroups",
          "key": "ctrl+shift+g",
          "when": "view == breakpointBucket"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./"
  },
  "devDependencies": {
    "@types/vscode": "^1.74.0",
    "@types/node": "16.x",
    "typescript": "^4.9.4"
  }
}
